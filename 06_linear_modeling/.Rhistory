# 4. 4
# 5. 4
# 6. 4
# 7. 4
# 8. 3
t_1 <- c(4,3,3,4,4,4,4,3)
# Anden rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_2 <- c(3,3,3,3,3,3,4,3)
# Tredje rating:
#   1. 4
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_3 <- c(4,3,3,3,3,3,4,3)
# Fjerde rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_4 <- c(3,3,3,3,3,3,4,3)
matrx <- matrix(t_1,t_2t_3,t_4)
# df <- data.frame(
#   c()
# )
matrx <- matrix(t_1,t_2,t_3,t_4)
matrx <- cbind(t_1,t_2,t_3,t_4)
matrx
# Fjerde rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
library(dplyr)
library(highcharter)
matrx %>% t()
matrx <-cbind(t_1,t_2,t_3,t_4)
df <-as.data.frame(matrx %>% t())
df
df <-as.data.frame(matrx %>% t()) %>% mutate(time = rownames(.))
df
df <-as.data.frame(matrx %>% t())
colnames(df) <- names_s
df <- df %>% mutate(time = rownames(.))
df
?gather
df <- df %>% gather(cat,rating,-time)
df <- df %>% tidyr::gather(cat,rating,-time)
df
?hcahrt
?hchart
?hcaes
hchart(df, hcaes(x=time,y=rating,group=cat))
hchart(df, type = scatter, hcaes(x=time,y=rating,group=cat))
hchart(df, type = 'scatter', hcaes(x=time,y=rating,group=cat))
p <- df %>%
transform(id = as.integer(factor(cat))) %>%
plot_ly(x = ~time, y = ~rating, color = ~cat, colors = "Dark2",
yaxis = ~paste0("y", id)) %>%
add_lines() %>%
subplot(nrows = 5, shareX = TRUE)
library(plotly)
p <- df %>%
transform(id = as.integer(factor(cat))) %>%
plot_ly(x = ~time, y = ~rating, color = ~cat, colors = "Dark2",
yaxis = ~paste0("y", id)) %>%
add_lines() %>%
subplot(nrows = 5, shareX = TRUE)
p
shiny::runApp('R/r_scripts/bday')
library(shiny)
runApp('R/r_scripts/bday')
runApp('R/r_scripts/bday')
runApp('R/r_scripts/bday')
library(markdown)
ls()
plot(1:10,1:10)
x <- 1:10
y <- x²
plot(x,y)
y <- x^2
plot(x,y)
x <- 1:10
y <- x^2
plot(x,y)
x <- 1:10
source('~/.active-rstudio-document', echo=TRUE)
x <- 1:10
y <- x^2
plot(x,y)
df <- mtcars
View(df)
?mean
?mutate
??mutate
install.packages("ggplot2")
diamonds
library(ggplot2)
diamonds
library(dbplyr)
library(dplyr)
mutate(diamonds, price_pr_carat = price / carat)
?dplyr
data<- read_excel("R/couse_oct/data/xl/haver.xlsx")
data
read_excel("R/couse_oct/data/xl/haver.xlsx")
library(readxl)
data<- read_excel("R/couse_oct/data/xl/haver.xlsx")
data
data<- read_excel("R/couse_oct/data/xl/haver.xlsx",skip=1)
data
data<- read_excel("R/couse_oct/data/xl/haver.xlsx",skip=1 , na = "#N/A")
data
View(data)
library(readr)
path <- "R/couse_oct/data/exercise.csv"
read_csv(path)
read_csv(path, na = "#NNAA")
data <- read_csv(path, na = "#NNAA")
data$Date <- as.Date(data$Date)
data
data <- read_csv(path, na = "#NNAA")
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data
data <- read_csv(path, na = "#NNAA")
data
library(feather)
library(data.table)
library(fst)
library(readr)
nr_of_rows <- 1e6
df <- data.frame(
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
)
timer <- function(expr){
res <- system.time(expr)
as.numeric(res[3]) #%>% round(9)
}
# fst
fstwrite <- timer(write.fst(df, "dataset.fst"))
fstread  <- timer(read.fst("dataset.fst"))
#fread
dtwrite <- timer(fwrite(df, "dataset.csv"))
dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
library(feather)
library(data.table)
library(fst)
library(readr)
# The first two entries are the total user and system CPU
# times of the current R process and any child processes on
# which it has waited, and the third entry is the ‘real’ elapsed time since the process was started.
#
# The definition of ‘user’ and ‘system’ times is from your OS.
# Typically it is something like The ‘user time’ is the CPU time
# charged for the execution of user instructions of the calling process.
# The ‘system time’ is the CPU time charged for execution by the system on behalf of the calling process.
nr_of_rows <- 1e6
library(tidyr)
df <- data.frame(
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
)
timer <- function(expr){
res <- system.time(expr)
as.numeric(res[3]) #%>% round(9)
}
# fst
fstwrite <- timer(write.fst(df, "dataset.fst"))
fstread  <- timer(read.fst("dataset.fst"))
#fread
dtwrite <- timer(fwrite(df, "dataset.csv"))
dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
hchart(read_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Read time in S for 1.000.000 rows"))
read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d<- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d$genres %>% unique
View(d)
View(d)
movies <- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
library(readr)
library(dplyr)
movies <- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
movies <- filter(movies, vote_average < 5)
movies <- filter(movies, original_language != "en")
arrange(movies,desc(budget))
top_budget_moovies <- arrange(movies,desc(budget))
View(top_budget_moovies)
top_budget_moovies <- select(top_budget_moovies, budget, original_title, overview)
best_rated_movies <- select(best_rated_movies, budget, original_title, overview, vote_average)
best_rated_movies <- arrange(movies,desc(vote_average))
best_rated_movies <- select(best_rated_movies, budget, original_title, overview, vote_average)
View(best_rated_movies)
movies <- filter(movies, vote_average > 5)
movies <- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
movies <- filter(movies, vote_average > 5)
movies <- filter(movies, original_language != "en")
top_budget_moovies <- arrange(movies,desc(budget))
top_budget_moovies <- select(top_budget_moovies, budget, original_title, overview)
best_rated_movies <- arrange(movies,desc(vote_average))
best_rated_movies <- select(best_rated_movies, budget, original_title, overview, vote_average)
View(top_budget_moovies)
View(best_rated_movies)
library(readxl)
optioner <- read_excel("R/couse_oct/data/xl/SPXoptions_changed.xlsx")
optioner <- read_excel("R/couse_oct/data/xl/SPXoptions_changed.xlsx")
optioner %>% mutate(bid_ask = best_bid - best_offer) %>%
mutate(moneyness = abs(nonbundle/2085-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(best_bid!=0) %>%
filter(nonbundle>=1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,nonbundle)
optioner %>% mutate(bid_ask = best_bid - best_offer) %>%
mutate(moneyness = abs(nonbundle/2085-1)) %>%
filter(bid_ask<5) %>%
filter(moneyness<0.4) %>%
filter(best_bid!=0) %>%
filter(nonbundle>1800) %>%
filter(cp_flag=="C") %>%
select(mid,cp_flag,best_bid,best_offer,nonbundle)
library(plotly)
avocados <- read_csv("R/couse_oct/data/avocado.csv") %>%
filter(region == "Albany" | region =="Boston")
plot_ly(avocados, x = ~Date, y = ~AveragePrice)
plot_ly(avocados, x = ~Date, y = ~AveragePrice, symbol = ~region)
plot_ly(avocados, x = ~Date, y = ~AveragePrice, symbol = ~region, color = type)
plot_ly(avocados, x = ~Date, y = ~AveragePrice, symbol = ~region, color = ~type)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height = 4, fig.width = 9,dpi=90)
library(tidyverse)
library(plotly)
library(dplyr)
library(readxl)
data <- read_excel("../data/xl/udrykningsaktivitet2.xlsx")
data %>%
group_by(Hændelsestype) %>%
summarise(avg_time = mean(`Mandtimer i alt`)) %>%
mutate(Hændelsestype = fct_reorder(Hændelsestype, avg_time)) %>%
plot_ly(x = ~Hændelsestype, y = ~avg_time) %>%
layout(margin = list(l = 50, r = 50, b = 150, t = 50, pad = 4))
data %>% count(Hændelsestype, `Hændelsesplacering hovedgruppe`) %>%
mutate(Hændelsestype = fct_reorder(Hændelsestype, n)) %>%
plot_ly(x = ~Hændelsestype, y = ~n, color = ~`Hændelsesplacering hovedgruppe`) %>%
layout(margin = list(l = 50, r = 50, b = 150, t = 50, pad = 4))
d1<- data %>% filter(`Hændelsesplacering hovedgruppe`=="Bygning")%>% select(Døgntime) %>% unlist() %>% as.numeric()
d2<- data %>% filter(`Hændelsesplacering hovedgruppe`!="Bygning")%>% select(Døgntime) %>% unlist() %>% as.numeric()
plot_ly(alpha = 0.6) %>%
add_histogram(x = ~d1, name = "bygning") %>%
add_histogram(x = ~d2, name = "Ikke bygning") %>%
layout(barmode = "overlay")
d1<- data %>% filter(`Hændelsesplacering hovedgruppe`=="Bygning")%>% select(Døgntime) %>% unlist() %>% as.numeric()
d2<- data %>% filter(`Hændelsesplacering hovedgruppe`!="Bygning")%>% select(Døgntime) %>% unlist() %>% as.numeric()
plot_ly(alpha = 0.6) %>%
add_histogram(x = ~d1, name = "bygning") %>%
add_histogram(x = ~d2, name = "Ikke bygning") %>%
layout()
library(dplyr)
library(readxl)
df <- read_excel('R.xlsx',col_names = T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(readxl)
df <- read_excel('../data/xl/R.xlsx',col_names = T)
df$Date <- as.Date(df$Date,origin = '1970-01-01')
df <- read_excel('../data/xl/R.xlsx',col_names = T)
df
df$Date <- as.Date(df$Date,origin = '1970-01-01')
df
df <- df %>%
mutate(lag1=lag(Yield),
lag2=lag(Yield,2),
movave=(lag1+lag2)/2)
df
fit <- lm(Yield~.,data = df)
fit$coefficients
broom::tidy(fit)
df %>% head
df %>% head %>% print
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(readxl)
df <- read_excel('../data/xl/R.xlsx',col_names = T)
df$Date <- as.Date(df$Date,origin = '1970-01-01')
df <- df %>%
mutate(lag1=lag(Yield),
lag2=lag(Yield,2),
movave=(lag1+lag2)/2)
View(df)
fit <- lm(Yield~.,data = df)
fit$coefficients
broom::tidy(fit)
broom::tidy(fit) %>% arrange(p.value)
broom::tidy(fit) %>% arrange(desc(p.value))
fit <- lm(Yield~CDS+M2+CPI,data = df)
fit <- lm(Yield~CDS+M2+CPI,data = df)
fit$coefficients
broom::tidy(fit) %>% arrange(desc(p.value))
df[ , estimates := predict(fit, data.frame(x)), by = groups]
df[ , estimates := predict(fit, data.frame(x))]
library(data.table)
df[ , estimates := predict(fit, data.frame(x))]
dt <- data.table(df)
dt
df[ , estimates := predict(fit, data.frame(x))]
dt[ , estimates := predict(fit, data.frame(x))]
dt[ , estimates := predict(fit, data.frame(dt))]
dt
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date)
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key)
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key, type = "line")
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key, mode = "lines")
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key, mode = "lines", markers = "line")
?plot_ly
dt %>% select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key) %>% add_lines()
df %>%
mutate(Pred = map(model, data, predict))
df %>%
mutate(Pred = map(fit, data, predict))
df %>%
mutate(Pred = predict(fit,.))
df %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, symbol=~key) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
pal <- RColorBrewer::brewer.pal(n = 5,name = "Spectral")
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = .),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
library(glmnet)
?glmnet
library(glmnet)
X = df %>% subset(.,select=-c(Date,Yield)) %>% as.matrix()
y = df$Yield
fit     <- glmnet(X,y,
family="gaussian")
X
X[is.na(X)] <- 0
fit     <- glmnet(X,y,
family="gaussian")
fit.values <- predict(fit,X)[,]
fit.values
min(df$Date)
max(df$Date)
df %>% select(Date,Yield) %>% filter(Date<'2014-01-01')
df %>% select(Date,Yield) %>% filter(Date<'2014-01-01') %>% max(.$Date)
df %>% select(Date,Yield) %>% filter(Date<'2014-01-01') %>% max(.)
df %>% select(Date,Yield) %>% filter(Date<'2014-01-01') %>% apply(., 2, max)
df %>% select(Date,Yield) %>% filter(Date<'2014-01-01'&Date>'2013-06-11')
df %>% select(Date,Yield) %>% filter(Date<'2014-02-01'&Date>'2013-06-11')
df %>% select(Date,Yield) %>% filter(Date<'2014'&Date>'2013-06-11')
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = . %>% filter(Date<'2014-01-01'))} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = (. %>% filter(Date<'2014-01-01')))} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .[.$Date<'2014-01-01',])} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .[.[,"Date"]<'2014-01-01',])} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = . %>% filter(Date<'2014-01-01')),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{subset <- . %>% filter(Date<'2014-01-01')⨪ %>% }
df %T>%
{subset <- . %>% filter(Date<'2014-01-01') } %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = .),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{subset <- . %>% filter(Date<'2014-01-01') } %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = subset),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
subset
df %T>%
{subset <<- . %>% filter(Date<'2014-01-01') } %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = subset),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{df_filter <<- . %>% filter(Date<'2014-01-01') } %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = df_filter),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{df_filter <<- (. %>% filter(Date<'2014-01-01')) } %>%
mutate(estimates = predict(lm(Yield~CDS+M2+CPI,data = df_filter),.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{df_filter <<- .$Date  }
df %T>%
{df_filter <- .$Date  }
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
df %T>%
{fit <- lm(Yield~CDS+M2+CPI,data = .)} %>%
mutate(estimates = predict(fit,.)) %>%
select(Date,Yield,estimates) %>% gather(key,value,-Date) %>%
plot_ly(x= ~ Date, y = ~value, color = ~key, colors = pal) %>% add_lines()
