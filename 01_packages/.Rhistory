Factor = c("s","#NNAA")
)
rbind.data.frame(df,tdf)
rbind.data.frame(tdf,df)
df <- data.frame(
Date = format(date, "%m/%d/%Y"),
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
) %>% apply(., 2, as.character)
df
tdf <- data.frame(
Date = c("s","#NNAA"),
Logical = c("s","#NNAA"),
Integer = c("s","#NNAA"),
Real = c("s","#NNAA"),
Factor = c("s","#NNAA")
)
df <- rbind.data.frame(tdf,df)
path <- "../data/exercise.csv"
write_csv(df, path)
data <- read_csv(path)
data
data <- read_csv(path, skip = 2)
data
tdf <- data.frame(
Date = c("#NNAA","#NNAA"),
Logical = c("#NNAA","#NNAA"),
Integer = c("#NNAA","#NNAA"),
Real = c("#NNAA","#NNAA"),
Factor = c("#NNAA","#NNAA")
)
df <- rbind.data.frame(tdf,df)
path <- "../data/exercise.csv"
write_csv(df, path)
data <- read_csv(path, skip = 2)
data <- read_csv(path, na = "#NNAA")
data
df <- data.frame(
Date = format(date, "%m/%d/%Y"),
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
) %>% apply(., 2, as.character)
tdf <- data.frame(
Date = c("#NNAA","#NNAA"),
Logical = c("#NNAA","#NNAA"),
Integer = c("#NNAA","#NNAA"),
Real = c("#NNAA","#NNAA"),
Factor = c("#NNAA","#NNAA")
)
df <- rbind.data.frame(tdf,df)
path <- "../data/exercise.csv"
write_csv(df, path)
data <- read_csv(path, na = "#NNAA")
data
df <- data.frame(
Date = format(date, "%m/%d/%Y"),
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
) %>% apply(., 2, as.character)
tdf <- data.frame(
Date = LETTERS[1:4],
Logical = LETTERS[1:4],
Integer = LETTERS[1:4],
Real = LETTERS[1:4],
Factor = LETTERS[1:4]
)
df <- rbind.data.frame(tdf,df)
path <- "../data/exercise_2.csv"
write_csv(df, path)
data <- read_csv(readr_example("challenge.csv"))
data
data <- read_csv(path, na = "#NNAA")
data
?read_csv
data <- read_csv(path, col_types = c("D","l",'i','n',"c"))
data
path <- "../data/exercise.csv"
data <- read_csv(path, na = "#NNAA")
path <- "../data/exercise_2.csv"
data <- read_csv(path, col_types = c("D","l",'i','n',"c"))
data
path
data <- read_csv(path)
data
data <- read_csv(path, col_types = "Dlinc")#c("D","l",'i','n',"c")
data
df <- data.frame(
Date = format(date, "%Y-%m-%d"),
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
) %>% apply(., 2, as.character)
tdf <- data.frame(
Date = LETTERS[1:4],
Logical = LETTERS[1:4],
Integer = LETTERS[1:4],
Real = LETTERS[1:4],
Factor = LETTERS[1:4]
)
df <- rbind.data.frame(tdf,df)
path <- "../data/exercise_2.csv"
write_csv(df, path)
data <- read_csv(path)
data <- read_csv(path, col_types = "Dlinc")#c("D","l",'i','n',"c")
data
data %>% complete.cases()
data %>% filter(complete.cases())
data %>% filter(complete.cases(.))
data <- read_csv(path, col_names = colnames(data), skip = 5)
data
options <- read_excel("../data/xl/SPXoptions_changed.xlsx")
options
options$mid
flight<- read_csv("../data/2000.csv")
flight
flight<- read_csv("../data/2000.csv") %>% filter(DayOfWeek>5)
flight
flight<- read_csv("../data/2000.csv") %>% filter(DayOfWeek>5) %>%
group_by(UniqueCarrier) %>% summarise(avgDelay = mean(DepDelay)) %>% arrange(Desc(avgDelay))
flight
flight<- read_csv("../data/2000.csv") %>% filter(DayOfWeek>5) %>%
group_by(UniqueCarrier) %>% summarise(avgDelay = mean(DepDelay)) %>% arrange(desc(avgDelay))
flight
flight<- read_csv("../data/2000.csv") %>% filter(DayOfWeek>5) %>%
group_by(UniqueCarrier) %>% summarise(avgDelay = mean(DepDelay,na.rm = T)) %>% arrange(desc(avgDelay))
flight
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE)
library(dplyr)
library(plotly)
require("datasets")
data("iris") # load Iris Dataset
data.table::data.table(iris %>% head)
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width)
#view statistical summary of dataset
summary(iris)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
iris<-iris %>% mutate_at(vars(Sepal.Length:Petal.Width), normalize)
data.table::data.table(iris %>% head)
result<- kmeans(iris %>% select(-c(Species)),3)
result$totss
result$betweenss / result$totss
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),3)
print(paste(i,"clusters yeilds ratio", result$betweenss / result$totss))
}
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
print(paste(i,"clusters yeilds ratio", round(result$betweenss / result$totss,5)))
}
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
print(paste(i,"clusters yeilds ratio", round(res$betweenss / res$totss,5)))
}
res_list = list
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
res_list = list()
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
plot(2:9,res_list %>% unlist)
plot(2:9,res_list %>% unlist, xlax = "clusters", ylab = "ratio", type = "l")
for (i in 1:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
2
res_list = list()
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
plot(2:9,res_list %>% unlist, xlax = "clusters", ylab = "ratio", type = "l")
res_list = list()
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
plot(2:9,res_list %>% unlist, xlax = "clusters", ylab = "ratio", type = "l")
res_list = list()
for (i in 2:9) {
res <- kmeans(iris %>% select(-c(Species)),i)
res_list[[i-1]] <- round(res$betweenss / res$totss,5)
print(paste(i,"clusters yeilds ratio", res_list[[i-1]]))
}
plot(2:9,res_list %>% unlist, xlax = "clusters", ylab = "ratio", type = "l")
plot(2:9,res_list %>% unlist, xlab = "clusters", ylab = "ratio", type = "l")
library(Rniftilib)
# Load NIFTI file
mri = nifti.image.read("/users/kimmouridsen/tiger/complex_data_course/2011/Exercises/Week_01/R/Handout/anatomical.img")
mask=read_csv("../data/brain/mask.csv", header=FALSE)
pwi=read.csv("../data/brain/pwi.csv", header=FALSE)
pwi = as.matrix(pwi)
dwi=read.csv("../data/brain/dwi.csv", header=FALSE)
dwi = as.matrix(dwi)
mask=read.csv("../data/brain/mask.csv", header=FALSE)
mask = as.matrix(mask)
mask
par(mfrow=c(1,2))
image(pwi,col=gray(seq(0,1,length=100)))
image(dwi,col=gray(seq(0,1,length=100)))
x11()
par(mfrow=c(1,2))
mdwi <-dwi
mdwi[mdwi<0]<-0
image.plot(mdwi, col = c("#00000000",brewer.pal(11, "Spectral")))+title(main = "Lesion core, high DWI, high MTT", font.main = 4)
mdwi <-dwi
mdwi[mdwi<0]<-0
image.plot(pwi, col = c("#00000000",brewer.pal(11, "Spectral")))+title(main = "Lesion core, high DWI, high MTT", font.main = 4)
??image.plot
mdwi <-dwi
mdwi[mdwi<0]<-0
# image.plot(mdwi, col = c("#00000000",brewer.pal(11, "Spectral")))+title(main = "Lesion core, high DWI, high MTT", font.main = 4)
mdwi <-dwi
# mdwi[mdwi<0]<-0
image.plot(pwi, col = c("#00000000",brewer.pal(11, "Spectral")))+title(main = "Lesion core, high DWI, high MTT", font.main = 4)
mdwi[mdwi<0]<-0
library(plotly)
p <- plot_ly(mdwi, type = "contour")
volcano
plot_ly(z=~mdwi, type = "contour")
plot_ly(z=~mdwi, type = "contour") %>% layout(title = list (text= ""))
plot_ly(z=~mdwi, type = "contour") %>% layout(title = list (text= "ge"))
?layout
plot_ly(z=~mdwi, type = "contour") %>% layout(title = "Lesion core, high DWI, high MTT"))
plot_ly(z=~mdwi, type = "contour") %>% layout(title = "Lesion core, high DWI, high MTT")
plot_ly(z=~pwi, type = "contour") %>% layout(title = "Lesion core, high DWI, high MTT")
p1<-plot_ly(z=~mdwi, type = "contour")
p2<-plot_ly(z=~pwi, type = "contour")
subplot(p1,p2) %>% layout(title = "Lesion core, high DWI, high MTT")
par(mfrow=c(1,2))
image(pwi,col=gray(seq(0,1,length=100)))
image(dwi,col=gray(seq(0,1,length=100)))
N = sum(mask==1)
Y = matrix(0, nrow=N, ncol=2)
Y[,1] = pwi[mask==1]
Y[,2] = dwi[mask==1]
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
image(segmented, col=rainbow(K+1))
km = kmeans(Y.scaled,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
Y.scaled = scale(Y)
km = kmeans(Y.scaled,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
image(segmented, col=rainbow(K+1))
require(mvtnorm)       # For multivariate Gaussian density
pi.est = rep(1,K)/K
rho = matrix(0,nrow=N,ncol=K)
init.id = sample(1:N,K)
mu = Y[init.id,]
sigma = array(0,c(K, dim(Y)[2], dim(Y)[2]))
for (k in 1:K) sigma[k,,]=cov(Y)
for (iter in 1:20){
print(iter)
# Calculate the N responsibilities
for (i in 1:N){
for (j in 1:K){
rho[i,j] = pi.est[j]*dmvnorm(Y[i,],mu[j,],sigma[j,,])
}
rho[i,] = rho[i,] / sum(rho[i,])
}
# Update parameters
for (j in 1:K){
mu[j,] = colSums(Y*rho[,j]) / sum(rho[,j])
}
for (j in 1:K){
sigma.tmp = 0
for (i in 1:N){
sigma.tmp = sigma.tmp + rho[i,j] * (Y[i,]-mu[j,])%*%t((Y[i,]-mu[j,]))
}
sigma[j,,] = sigma.tmp / sum(rho[,j])
}
for (j in 1:K){
pi.est[j] = sum(rho[,j]) / N
}
}
library(fields)
library(RColorBrewer)
x11()
par(mfrow=c(2,2))
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
#image(tmp,col=gray(seq(0,1,length=100)))
image.plot(tmp, col = c("#00000000",brewer.pal(11, "Spectral")))  # #000000
}
tmp <- matrix(dwi,128,128)
classprob<- matrix(0,128,128)
classprob[mask==1]<-tmp[mask==1]
require(mvtnorm)       # For multivariate Gaussian density
pi.est = rep(1,K)/K
rho = matrix(0,nrow=N,ncol=K)
init.id = sample(1:N,K)
mu = Y[init.id,]
sigma = array(0,c(K, dim(Y)[2], dim(Y)[2]))
for (k in 1:K) sigma[k,,]=cov(Y)
for (iter in 1:20){
print(iter)
# Calculate the N responsibilities
for (i in 1:N){
for (j in 1:K){
rho[i,j] = pi.est[j]*dmvnorm(Y[i,],mu[j,],sigma[j,,])
}
rho[i,] = rho[i,] / sum(rho[i,])
}
# Update parameters
for (j in 1:K){
mu[j,] = colSums(Y*rho[,j]) / sum(rho[,j])
}
for (j in 1:K){
sigma.tmp = 0
for (i in 1:N){
sigma.tmp = sigma.tmp + rho[i,j] * (Y[i,]-mu[j,])%*%t((Y[i,]-mu[j,]))
}
sigma[j,,] = sigma.tmp / sum(rho[,j])
}
for (j in 1:K){
pi.est[j] = sum(rho[,j]) / N
}
}
library(fields)
library(RColorBrewer)
x11()
par(mfrow=c(2,2))
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
#image(tmp,col=gray(seq(0,1,length=100)))
plot_ly(z=~pwi, type = "contour")
#image.plot(tmp, col = c("#00000000",brewer.pal(11, "Spectral")))  # #000000
}
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
#image(tmp,col=gray(seq(0,1,length=100)))
plot_ly(z=~pwi, type = "contour")
#image.plot(tmp, col = c("#00000000",brewer.pal(11, "Spectral")))  # #000000
}
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
#image(tmp,col=gray(seq(0,1,length=100)))
print(plot_ly(z=~pwi, type = "contour"))
#image.plot(tmp, col = c("#00000000",brewer.pal(11, "Spectral")))  # #000000
}
rho
rho
require(mvtnorm)       # For multivariate Gaussian density
pi.est = rep(1,K)/K
install.packages(mvtnorm)
install.packages("mvtnorm")
require(mvtnorm)       # For multivariate Gaussian density
pi.est = rep(1,K)/K
rho = matrix(0,nrow=N,ncol=K)
init.id = sample(1:N,K)
mu = Y[init.id,]
sigma = array(0,c(K, dim(Y)[2], dim(Y)[2]))
for (k in 1:K) sigma[k,,]=cov(Y)
for (iter in 1:20){
print(iter)
# Calculate the N responsibilities
for (i in 1:N){
for (j in 1:K){
rho[i,j] = pi.est[j]*dmvnorm(Y[i,],mu[j,],sigma[j,,])
}
rho[i,] = rho[i,] / sum(rho[i,])
}
# Update parameters
for (j in 1:K){
mu[j,] = colSums(Y*rho[,j]) / sum(rho[,j])
}
for (j in 1:K){
sigma.tmp = 0
for (i in 1:N){
sigma.tmp = sigma.tmp + rho[i,j] * (Y[i,]-mu[j,])%*%t((Y[i,]-mu[j,]))
}
sigma[j,,] = sigma.tmp / sum(rho[,j])
}
for (j in 1:K){
pi.est[j] = sum(rho[,j]) / N
}
}
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
#image(tmp,col=gray(seq(0,1,length=100)))
print(plot_ly(z=~tmp, type = "contour"))
#image.plot(tmp, col = c("#00000000",brewer.pal(11, "Spectral")))  # #000000
}
K
mask
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
plist[[k]] <- plot_ly(z=~tmp, type = "contour")
}
plist <- list()
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
plist[[k]] <- plot_ly(z=~tmp, type = "contour")
}
subplot(plist)
k
tmp[mask==1]=rho[,1]
plist[[k]] <- plot_ly(z=~tmp, type = "contour")
subplot(plist)
subplot(plist[[1]],plist[[2]])
plist <- list()
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,1]
p <- <- plot_ly(z=~tmp, type = "contour")
plist[[k]] <- p
}
plist <- list()
for (k in 1:K){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,1]
p  <- plot_ly(z=~tmp, type = "contour")
plist[[k]] <- p
}
subplot(plist[[1]],plist[[2]])
img_er <- function(k){
tmp = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
tmp[mask==1]=rho[,k]
return(plot_ly(z=~tmp, type = "contour"))
}
subplot(img_er(1),img_er(2),img_er(3))
img_er <- function(k){
probclass = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
probclass[mask==1]=rho[,k]
return(plot_ly(z=~probclass, type = "contour"))
}
subplot(img_er(1),img_er(2),img_er(3))
segmented
plot_ly(z=~segmented, type = "contour")
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
plot_ly(z=~segmented, type = "contour")
subplot(p1,p2)
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p1<-plot_ly(z=~segmented, type = "contour")
Y.scaled = scale(Y)
km = kmeans(Y.scaled,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p2<-plot_ly(z=~segmented, type = "contour")
subplot(p1,p2) %>% layout(title = "Importance of scaling")
N = sum(mask==1)
Y = matrix(0, nrow=N, ncol=2)
Y[,1] = pwi[mask==1]
Y[,2] = dwi[mask==1]
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p1<-plot_ly(z=~segmented, type = "contour")
Y.scaled = scale(Y)
km = kmeans(Y.scaled,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p2<-plot_ly(z=~segmented, type = "contour")
subplot(p1,p2) %>% layout(title = "Importance of scaling")
N = sum(mask==1)
Y = matrix(0, nrow=N, ncol=2)
Y[,1] = pwi[mask==1]
Y[,2] = dwi[mask==1]
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p1<-plot_ly(z=~segmented, type = "contour")
Y.scaled = scale(Y)
km = kmeans(Y.scaled,K)
segmented1 = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented1[mask==1]=km$cluster
p2<-plot_ly(z=~segmented1, type = "contour")
subplot(p1,p2) %>% layout(title = "Importance of scaling")
img_er <- function(k){
probclass = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
probclass[mask==1]=rho[,k]
return(plot_ly(z=~probclass, type = "contour"))
}
subplot(img_er(1),img_er(2),img_er(3))
?kmeans
